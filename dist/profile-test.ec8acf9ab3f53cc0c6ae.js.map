{"version":3,"sources":["webpack:///./src/profile/pages/test/index.jsx","webpack:///./src/utils/common.js","webpack:///./node_modules/_@babel_runtime@7.7.7@@babel/runtime/regenerator/index.js","webpack:///./node_modules/_regenerator-runtime@0.13.3@regenerator-runtime/runtime.js","webpack:///./node_modules/_@babel_runtime@7.7.7@@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/store/action/test.js"],"names":["Test","query","uri","i","key","value","index","split","window","location","search","indexOf","pieces","substring","params","length","Error","e","console","log","name","message","fileName","lineNumber","stack","mapQuery","href","this","props","addNum","storeNum","to","onClick","React","Component","compose","connect","state","test","dispatch","bindActionCreators","module","exports","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","method","arg","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","asyncGeneratorStep","gen","_next","_throw","a","Types","data","args","arguments","apply"],"mappings":"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","file":"profile-test.ec8acf9ab3f53cc0c6ae.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { bindActionCreators, compose } from \"redux\"\r\nimport { connect } from \"react-redux\"\r\nimport { addNum } from \"../../../store/action/test\"\r\nimport { mapQuery } from \"../../../utils/common\"\r\n\r\nclass Test extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const query = mapQuery(location.href)\r\n        console.log(query)\r\n    }\r\n\r\n    render () {\r\n        const { addNum, storeNum } = this.props\r\n        return (\r\n           <div>\r\n               <h1>Hello from Community Test</h1>\r\n               <Link to={\"/community\"}>Community Home</Link>\r\n               <span>{storeNum}</span>\r\n               <button onClick={addNum}>+++++++</button>\r\n\r\n               <Link to={\"/admin\"}>To Admin Home</Link>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storeNum: state.test.storeNum\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addNum: bindActionCreators(addNum, dispatch)\r\n})\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        mapDispatchToProps\r\n    )\r\n)(Test)\r\n","const mapQuery = (uri) => {\r\n    // url 参数解析\r\n    //window.location.search\r\n    uri = uri && uri.split('#')[0] || window.location.search; //remove hash\r\n    var i,\r\n        key,\r\n        value,\r\n        index = uri.indexOf(\"?\"),\r\n        pieces = uri.substring(index + 1).split(\"&\"),\r\n        params = {};\r\n    if (index === -1) {//如果连?号都没有,直接返回,不再进行处理.\r\n        return params;\r\n    }\r\n    for (i = 0; i < pieces.length; i++) {\r\n        try {\r\n            index = pieces[i].indexOf(\"=\");\r\n            key = pieces[i].substring(0, index);\r\n            value = pieces[i].substring(index + 1);\r\n            if (!(params[key] = (value))) {\r\n                throw new Error(\"uri has wrong query string when run mapQuery.\");\r\n            }\r\n        } catch (e) {\r\n            console.log(\"错误：[\" + e.name + \"] \" + e.message + \", \" + e.fileName + \", 行号:\" + e.lineNumber + \"; stack:\" + typeof e.stack, 2);\r\n        }\r\n    }\r\n    return params;\r\n}\r\n\r\nexport {\r\n    mapQuery\r\n}\r\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import * as Types from \"../action-types\";\r\n\r\nconst addNum = (params)=>{\r\n    return async (dispatch)=>{\r\n        await dispatch({type:Types.ADD_NUM, data: params })\r\n    }\r\n}\r\n\r\nexport { addNum }\r\n"],"sourceRoot":""}